
/*****************************************************************************/

//#include <avr/power.h>

//#include "SPI.h"

/*****************************************************************************/

#include <Servo.h>

Servo myservo0;
Servo myservo1;
Servo myservo2;
Servo myservo3;

/*****************************************************************************/

int pos = 0;    // variable to store the servo position

byte payloadChecksum = 0;
byte CalculatedChecksum;
byte checksum = 0;              //data type byte stores an 8-bit unsigned number, from 0 to 255
int payloadLength = 0;
byte payloadData[100] = {
  0
};
byte poorQuality = 0;
int attention = 0;
int meditation = 0;

unsigned int delta_wave = 0;
unsigned int theta_wave = 0;
unsigned int low_alpha_wave = 0;
unsigned int high_alpha_wave = 0;
unsigned int low_beta_wave = 0;
unsigned int high_beta_wave = 0;
unsigned int low_gamma_wave = 0;
unsigned int mid_gamma_wave = 0;

// system variables
long lastReceivedPacket = 0;
boolean bigPacket = false;
boolean brainwave = false;

int oldMed = 0;


/*****************************************************************************/

/***RF12 lib's   ****/

/*****************************************************************************/
#include <JeeLib.h>

char inputString[] = {
  '#','*', B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111
    , B11110000,B00001111,B11110000,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111
} 
;         // a string to hold incoming data
boolean stringComplete = false;  // whether the string is complete

char buf7[] = {
  '#','*', B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111, 
  B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111} 
; 
unsigned char bufferLength = 20;

int upperLimit1 = 170;
int lowerLimit1 = 70;

int upperLimit2 = 90;
int lowerLimit2 = 0;

/*****************************************************************************/

unsigned char modus = 0;//0 = Mindwave; 1 = serial //2 RF12

unsigned long timer = 0;
char timerCounter = 0;

char waitOn = 0;

/*****************************************************************************/

void setup()
{
  Serial.begin(9600);
  Serial.println("friend start1");

  myservo0.attach(6);   
  delay(10);  
  myservo0.write(70); 
  delay(10); //right up
  myservo1.attach(9);   
  delay(10);  
  myservo1.write(170); 
  delay(10); //right up
  delay(100);
  myservo2.attach(3);   
  delay(10);  
  myservo3.attach(5);   
  delay(10);  

  myservo1.write(upperLimit2); 
  delay(100); 
  myservo0.write(180 - upperLimit2);  
  delay(100);


  myservo2.write(lowerLimit1);
  delay(250);
  myservo3.write(180 - lowerLimit1); 
  delay(250);



  rf12_initialize('R', RF12_868MHZ, 212);

  Serial.println("strange attractor");


}

void loop()
{
  
  if ( modus == 0 ){//bluetooth connection
    
    bluetoothModus();
    
  }else if ( modus == 1 ){ //receiving orders via Serial

  if ( Serial.available()){
    char inbyte = Serial.read();
    //Serial.println("vibrate from serial");

    /*
    for (pos = 0; pos <= 180; pos += 5) // goes from 0 degrees to upperLimit degrees
     {
     myservo2.write(pos);              // tell servo to go to position in variable 'pos'
     delay(10);  
     } 
     
     Serial.println("vibrate from serial");
     */

    if ( inbyte == '1') excitement1();

    if ( inbyte == '2') { //all down
      servoLoop1();
      delay(100);
      servoLoop2();
    }

    if ( inbyte == '3') servoLoop2();//hands down

    if ( inbyte == '4')  //spirals up
    {
      myservo1.write(upperLimit1);
      delay(250);
      myservo0.write(180 - upperLimit1); 
      delay(250);

      for (pos = upperLimit1; pos >= lowerLimit1; pos -= 1) // goes from upperLimit degrees to 0 degrees
      {
        doServoPos1(pos);
      }
    }

    if ( inbyte == '5')  //hands up
    {
      for (pos = lowerLimit2; pos <= upperLimit2; pos += 1) // goes from 0 degrees to upperLimit degrees
      { // in steps of 1 degree
        doServoPos2(pos);
      }
    }
  }
  }
  else if ( modus == 2 ){ // receiving orders via RF12


  char* buf = (char*) rf12_data;

  if (rf12_recvDone() && rf12_crc == 0) {

    Serial.println("friend sees data");
    int check = 0;
    int counter = 0;
    int i = 0;
    while ( i < 30 )
    {
      if ( buf[i] == 's' ) {
        if ( buf[i+1] == 't') { 
          if ( buf[i+2] == '1') { //wiggle spirals
            excitement1();
          }
          if ( buf[i+2] == '2') { //all down
            servoLoop1();
            delay(100);
            servoLoop2();
          }
          if ( buf[i+2] == '3') { 
            servoLoop2();//hands down
          }
          if ( buf[i+2] == '4') { //spirals up
            myservo1.write(upperLimit1);
            delay(250);
            myservo0.write(180 - upperLimit1); 
            delay(250);

            for (pos = upperLimit1; pos >= lowerLimit1; pos -= 1) // goes from upperLimit degrees to 0 degrees
            {
              doServoPos1(pos);
            }
          }
          if ( buf[i+2] == '5') { //hands up
            {
              for (pos = lowerLimit2; pos <= upperLimit2; pos += 1) // goes from 0 degrees to upperLimit degrees
              { // in steps of 1 degree
                doServoPos2(pos);
              }
            }
          }

        }
      }
      i++;
    }
  }
  }

}

void servoLoop1(){

  myservo1.write(lowerLimit1);
  delay(250);
  myservo0.write(180 - lowerLimit1); 
  delay(250);

  for (pos = lowerLimit1; pos <= upperLimit1; pos += 1) // goes from 0 degrees to upperLimit degrees
  { // in steps of 1 degree
    doServoPos1(pos);
  }
  /*
  for (pos = upperLimit1; pos >= lowerLimit1; pos -= 1) // goes from upperLimit degrees to 0 degrees
   {
   doServoPos1(pos);
   }
   */
}
void doServoPos1(int pos){
  myservo1.write(pos);              // tell servo to go to position in variable 'pos'
  delay(15);                       // waits 15ms for the servo to reach the position
  myservo0.write(180 - pos);              // tell servo to go to position in variable 'pos'
  delay(15);

}

void servoLoop2(){

  /*
  for (pos = lowerLimit2; pos <= upperLimit2; pos += 1) // goes from 0 degrees to upperLimit degrees
   { // in steps of 1 degree
   doServoPos2(pos);
   }
   */

  for (pos = upperLimit2; pos >= lowerLimit2; pos -= 1) // goes from upperLimit degrees to 0 degrees
  {
    doServoPos2(pos);
  }
}
void doServoPos2(int pos){
  myservo2.write(pos);              // tell servo to go to position in variable 'pos'
  delay(15);                       // waits 15ms for the servo to reach the position
  myservo3.write(180 - pos);              // tell servo to go to position in variable 'pos'
  delay(15);

}

void excitement1() {


  /*
  int upperLimit1 = 170;
   int lowerLimit1 = 70;
   
   int upperLimit2 = 90;
   int lowerLimit2 = -10;
   */
  /*
  myservo1.write(upperLimit2); 
   delay(100); 
   myservo0.write(180 - upperLimit2);  
   delay(100);
   */
  for (pos = 90; pos <= 110; pos += 1) // goes from upperLimit degrees to 0 degrees
  {
    myservo1.write(pos); 
    delay(15); 
  }
  for (pos = 90; pos <= 110; pos += 1) // goes from upperLimit degrees to 0 degrees
  {
    myservo0.write(pos);  
    delay(15);  
  }

  myservo1.write(70 + 40);//110
  delay(250);
  myservo0.write(180 - 170 + 60 + 40);//110
  delay(250);

  for ( int k = 0; k<5;k++){
    for (pos = 70; pos <= 110; pos += 1) // goes from upperLimit degrees to 0 degrees
    {
      myservo0.write(pos);  
      delay(15);   
      myservo1.write(pos);   
      delay(15);  
    }
    for (pos = 110; pos >= 70; pos -= 1) // goes from upperLimit degrees to 0 degrees
    {
      myservo0.write(pos);   
      delay(15);  
      myservo1.write(pos);   
      delay(15);  
    }
  }
}

void excitement2() {

  //excitement1
  // myservo0.write(180 - 170 + 60);//70
  //delay(250);
  //myservo1.write(70 + 0);//70
  //delay(250);

  myservo1.write(70 + 40);//110
  delay(250);
  myservo0.write(180 - 170 + 60 + 40);//110
  delay(250);

  for ( int k = 0; k<5;k++){
    for (pos = 70; pos <= 110; pos += 1) // goes from upperLimit degrees to 0 degrees
    {
      myservo2.write(pos);  
      delay(15);   
      myservo3.write(pos);   
      delay(15);  
    }
    for (pos = 110; pos >= 70; pos -= 1) // goes from upperLimit degrees to 0 degrees
    {
      myservo2.write(pos);   
      delay(15);  
      myservo3.write(pos);   
      delay(15);  
    }
  }


}


void excitement3() {
  int stepPos = 1;
  int nDelay = 20;



}

void bluetoothModus(){
  
  // Look for sync bytes
    // Byte order: 0xAA, 0xAA, payloadLength, payloadData,
    // Checksum (sum all the bytes of payload, take lowest 8 bits, then bit inverse on lowest
    if (ReadOneByte() == 0xAA) {
      if (ReadOneByte() == 0xAA) {

        payloadLength = ReadOneByte();
        if (payloadLength > 169) {
          //Payload length can not be greater than 169
          return;
        }
        payloadChecksum = 0;
        for (int i = 0; i < payloadLength; i++) {     //loop until payload length is complete
          payloadData[i] = ReadOneByte();             //Read payload
          payloadChecksum += payloadData[i];
        }
        checksum = ReadOneByte();                     //Read checksum byte from stream
        payloadChecksum = 255 - payloadChecksum;      //Take oneâ€™s compliment of generated checksum
        if (checksum == payloadChecksum) {
          poorQuality = 200;
          attention = 0;
          meditation = 0;
        }
        brainwave = false;
        for (int i = 0; i < payloadLength; i++) { // Parse the payload
          switch (payloadData[i]) {

          case 02:
            i++;
            poorQuality = payloadData[i];
            bigPacket = true;
            break;
          case 04:
            i++;
            attention = payloadData[i];
            break;
          case 05:
            i++;
            meditation = payloadData[i];
            break;
          case 0x80:
            i = i + 3;
            break;
          case 0x83:                         // ASIC EEG POWER INT
            i++;
            brainwave = true;
            byte vlen = payloadData[i];
            read_waves(i + 1);
            i += vlen;
            break;
          }                                 // switch
        }                                   // for loop

        if (brainwave && attention > 0 && attention < 100) {
          //to do: rf12 sending data to laptop
          
            myservo2.write(attention); 

          blink7(1);

          char giveMaxRawData = getMaximum();// get max of RAW WAVES
          //setColor(giveMaxRawData); // set color

          //colorWipe(strip.Color(r, g, b), 10); 

          int limitVal = 85;

          if ( (attention < limitVal) && (meditation < limitVal) ) {
            //meditation= meditation / 3;
           
          }
          else if ( attention >= limitVal) {

            excitement1();
            delay(1000);
            
            //all down
              servoLoop1();
            delay(100);
            servoLoop2();
            
      
          }
          else if ( meditation >= limitVal ) {

         for (pos = lowerLimit2; pos <= upperLimit2; pos += 1) // goes from 0 degrees to upperLimit degrees
      { // in steps of 1 degree
        doServoPos2(pos);
      }
      
     delay(1000);
     
     //all down
     
       servoLoop1();
            delay(100);
            servoLoop2();
     
     
          }


          //delay(500);
          //timer = millis() + 5000;

          //for(int i=0; i<strip.numPixels(); i++) strip.setPixelColor(i, 0);
          /*
          meditation = (meditation + oldMed)/2;
           
           buf7[2] = (char)(meditation/10+48);
           buf7[3] = (char)(meditation%10+48);
           buf7[4] = ',';
           buf7[5] = (char)(attention/10+48);
           buf7[6] = (char)(attention%10+48);
           sendChars();
           */

        }
      }
    }
  }
  
  void blink7(int numberOfTimes) {
  for ( int i = 0; i < numberOfTimes ; i++) {
    digitalWrite(7, HIGH);
    delay(200);
    digitalWrite(7, LOW);
    delay(200);
  }
}

byte ReadOneByte() {
  int ByteRead;
  // Wait until there is data
  while (!Serial.available()) {
    if ( (timer < millis()) ) {
      timer = millis() + 5000;
      waitAction();
    }
  }
  //Get the number of bytes (characters) available for reading from the serial port.
  //This is data that's already arrived and stored in the serial receive buffer (which holds 64 bytes)
  ByteRead = Serial.read();
  return ByteRead; // read incoming serial data
}



void read_waves(int i) {
  delta_wave = read_3byte_int(i);
  i += 3;
  theta_wave = read_3byte_int(i);
  i += 3;
  low_alpha_wave = read_3byte_int(i);
  i += 3;
  high_alpha_wave = read_3byte_int(i);
  i += 3;
  low_beta_wave = read_3byte_int(i);
  i += 3;
  high_beta_wave = read_3byte_int(i);
  i += 3;
  low_gamma_wave = read_3byte_int(i);
  i += 3;
  mid_gamma_wave = read_3byte_int(i);
}

int read_3byte_int(int i) {
  return ((payloadData[i] << 16) + (payloadData[i + 1] << 8) + payloadData[i + 2]);
}

char getMaximum() {

  unsigned int rawVals[8] = {
    delta_wave, theta_wave, low_alpha_wave, high_alpha_wave, low_beta_wave, high_beta_wave, low_gamma_wave, mid_gamma_wave
  };
  char max = -1;
  for ( int j = 0; j < 8; j++) {
    char h = 0;
    for ( int i = 0; i < 8; i++) {
      if ( rawVals[j] < rawVals[i] ) {
        h = 1;
        break;
      }
    }
    if ( h == 0 ) {
      max = j;
      break;
    }
  }
  return max;
}

void waitAction() {

  int pos = 0;
  blink7(1);
  
  if ( waitOn == 0){
   myservo1.write(180 -45); delay(15);
    myservo0.write(45); 
    
    
      myservo2.write(60); delay(15);
    myservo3.write(180 -60); 
    
   waitOn = 1;}else{
     waitOn = 0;
   
    myservo1.write(180 -60);  delay(15);
       myservo0.write(60); 
       
          myservo2.write(45); delay(15);
    myservo3.write(180 -45); 
   }
 
 //something to indicate being alive

}







