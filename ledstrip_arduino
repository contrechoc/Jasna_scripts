//RF uses 13,12,11,10,2
//bluetooth uses Serial
//ledstrip uses 3,4

/*****************************************************************************/

// Arduino Bluetooth Interface with Mindwave
// Sophi Kravitz edit 11-4
// Shane Clements edit 11-5

/*****************************************************************************/


#include "LPD8806.h"
#include "SPI.h"

#include <JeeLib.h>

byte payloadChecksum = 0;
byte CalculatedChecksum;
byte checksum = 0;              //data type byte stores an 8-bit unsigned number, from 0 to 255
int payloadLength = 0;
byte payloadData[100] = {
  0};
byte poorQuality = 0;
int attention = 0;
int meditation = 0;

unsigned int delta_wave = 0;
unsigned int theta_wave = 0;
unsigned int low_alpha_wave = 0;
unsigned int high_alpha_wave = 0;
unsigned int low_beta_wave = 0;
unsigned int high_beta_wave = 0;
unsigned int low_gamma_wave = 0;
unsigned int mid_gamma_wave = 0;

// system variables
long lastReceivedPacket = 0;
boolean bigPacket = false;
boolean brainwave = false;

int oldMed = 0;

/*****************************************************************************/

// LPD8806-based RGB LED strip

/*****************************************************************************/


// Number of RGB LEDs in strand:
int nLEDs = 32   ;

// Chose 2 pins for output; can be any valid output pins:
int dataPin  = 2;
int clockPin = 3;


unsigned char g,b,c, cMode = 0;
unsigned char r =127;

// First parameter is the number of LEDs in the strand.  The LED strips
// are 32 LEDs per meter but you can extend or cut the strip.  Next two
// parameters are SPI data and clock pins:
LPD8806 strip = LPD8806(nLEDs, dataPin, clockPin);

/*****************************************************************************/

/***RF12 lib's   ****/

/*****************************************************************************/




char inputString[] = {
  '#','*', B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111
    , B11110000,B00001111,B11110000,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111
} 
;         // a string to hold incoming data
boolean stringComplete = false;  // whether the string is complete

char buf7[] = {
  '#','*', B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111, 
  B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111} 
; 
unsigned char bufferLength = 20;

unsigned char modus = 0;

void setup() {
  // Start up the LED strip
  strip.begin();

  // Update the strip, to start they are all 'off'
  strip.show();

  //RF12
  rf12_initialize('R', RF12_868MHZ, 212);

  //Bluetooth
  Serial.begin(57600);       // Bluetooth
  delay(100);

}

void loop() {

  if ( modus == 0 ){//bluetooth

    // Look for sync bytes
    // Byte order: 0xAA, 0xAA, payloadLength, payloadData,
    // Checksum (sum all the bytes of payload, take lowest 8 bits, then bit inverse on lowest
    if(ReadOneByte() == 0xAA) {
      if(ReadOneByte() == 0xAA) {

        payloadLength = ReadOneByte();
        if(payloadLength > 169) {
          //Payload length can not be greater than 169
          return;
        }
        payloadChecksum = 0;
        for(int i = 0; i < payloadLength; i++) {      //loop until payload length is complete
          payloadData[i] = ReadOneByte();             //Read payload
          payloadChecksum += payloadData[i];
        }
        checksum = ReadOneByte();                     //Read checksum byte from stream
        payloadChecksum = 255 - payloadChecksum;      //Take one’s compliment of generated checksum
        if(checksum == payloadChecksum) {
          poorQuality = 200;
          attention = 0;
          meditation = 0;
        }
        brainwave = false;
        for(int i = 0; i < payloadLength; i++) { // Parse the payload
          switch (payloadData[i]) {

          case 02:
            i++;
            poorQuality = payloadData[i];
            bigPacket = true;
            break;
          case 04:
            i++;
            attention = payloadData[i];
            break;
          case 05:
            i++;
            meditation = payloadData[i];
            break;
          case 0x80:
            i = i + 3;
            break;
          case 0x83:                         // ASIC EEG POWER INT
            i++;
            brainwave = true;
            byte vlen = payloadData[i];
            //mySerial.print(vlen, DEC);
            //mySerial.println();
            read_waves(i+1);
            i += vlen; // i = i + vlen
            break;
          }                                 // switch
        }                                   // for loop


        if(brainwave && attention > 0 && attention < 100) {
          //rf12 sending data to laptop
          
          char giveMaxRawData = getMaximum();// get max of RAW WAVES
          setColor(giveMaxRawData); // set color

            
          /*
          meditation = (meditation + oldMed)/2; 
           
           buf7[2] = (char)(meditation/10+48);
           buf7[3] = (char)(meditation%10+48);
           buf7[4] = ',';
           buf7[5] = (char)(attention/10+48);
           buf7[6] = (char)(attention%10+48);
           sendChars();
           */

        }
      }
    }
  }
  else if ( modus == 1 ){//show modus

    changeColor();

    for(int i=0; i<strip.numPixels(); i++) {
      strip.setPixelColor(i, strip.Color(g,r,b));
      strip.show();
    }

    delay(1000);

    explodeFromMiddle(strip, strip.Color(50 ,  0,  0),strip.Color(127,  0,  0),strip.Color(50,  20,  1), 100); // Red
    colorChaseUP(strip, strip.Color(  0,127,  0),strip.Color(  127,127,  0),strip.Color(  0,127,  0), 100); // Green
    explodeFromMiddle(strip, strip.Color(  0,  127,127),strip.Color(  0,  0,127),strip.Color(  0,  127,127), 50); // Blue
    colorChaseDOWN(strip, strip.Color(1,127,0),strip.Color(0,127,127),strip.Color(1,127,0), 10); // White

  }
  else if ( modus == 2 ) {//receive from RF12 modus



  }
}

void changeColor(){

  if ( cMode == 0 ){
    if (r>0) r--;
    if ( g < 127) g++;
    b=0;
  }
  if ( cMode == 1 ){
    r=0;
    if (g>0) g--;
    if ( b < 127) b++;
  }

  if ( cMode == 2 ){
    if(r<127) r++;
    g=0;
    b=127;
  }
  if ( cMode == 3){
    r=127;
    if (g < 127)  g++;
    if (b > 0)  b--;
  }
  if ( cMode == 4 ){
    if (r>0) r--;
    g=127;
    if ( b < 127) b++;
  }
  if ( cMode == 5 ){
    if ( r < 127)r++;
    g=127;
    b=127;
  }
  if ( cMode == 6 ){
    r=127;
    if (g>0)g--;
    if (b>0) b--;
  }

  c++;
  delay(100);

  if ( c>=254 ) cMode++;
  if (cMode > 6)cMode = 0;

}


// Chase one dot down the full strip.  Good for testing purposes.
void colorChaseUP(LPD8806 strip, uint32_t c0,uint32_t c1,uint32_t c3, uint8_t wait) {
  int i;

  // Start by turning all pixels off:
  for(i=0; i<strip.numPixels(); i++) strip.setPixelColor(i, 0);

  // Then display one pixel at a time:
  for(i=1; i<strip.numPixels()-1; i++) {
    strip.setPixelColor(i-1, c1);
    strip.setPixelColor(i, c0); // Set new pixel 'on'
    strip.setPixelColor(i+1, c3);
    strip.show();              // Refresh LED states
    strip.setPixelColor(i, 0); // Erase pixel, but don't refresh!
    strip.setPixelColor(i+1, 0);
    strip.setPixelColor(i-1, 0);
    delay(wait);
  }

  strip.show(); // Refresh to turn off last pixel
}

void colorChaseDOWN(LPD8806 strip, uint32_t c0,uint32_t c1,uint32_t c3, uint8_t wait) {
  int i;

  // Start by turning all pixels off:
  for(i=0; i<strip.numPixels(); i++) strip.setPixelColor(i, 0);

  for(i=strip.numPixels()-1; i>1; i--) {
    strip.setPixelColor(i-1, c1);
    strip.setPixelColor(i, c0); // Set new pixel 'on'
    strip.setPixelColor(i+1, c3);
    strip.show();              // Refresh LED states
    strip.setPixelColor(i, 0); // Erase pixel, but don't refresh!
    strip.setPixelColor(i+1, 0);
    strip.setPixelColor(i-1, 0);
    delay(wait);
  }
  strip.show(); // Refresh to turn off last pixel
}

void explodeFromMiddle(LPD8806 strip, uint32_t c0,uint32_t c1,uint32_t c3, uint8_t wait) {
  int i;

  // Start by turning all pixels off:
  for(i=0; i<strip.numPixels(); i++) strip.setPixelColor(i, 0);

  for(i=strip.numPixels()/2; i<strip.numPixels()-1; i++) {
    strip.setPixelColor(i-1, c1);
    strip.setPixelColor(i, c0); // Set new pixel 'on'
    strip.setPixelColor(i+1, c3);

    strip.setPixelColor(strip.numPixels() - i+1, c1);
    strip.setPixelColor(strip.numPixels() - i, c0); // Set new pixel 'on'
    strip.setPixelColor(strip.numPixels() -i-1, c3);

    strip.show();              // Refresh LED states
    strip.setPixelColor(i, 0); // Erase pixel, but don't refresh!
    strip.setPixelColor(i+1, 0);
    strip.setPixelColor(i-1, 0);

    strip.setPixelColor(strip.numPixels() -i, 0); // Erase pixel, but don't refresh!
    strip.setPixelColor(strip.numPixels() -i+1, 0);
    strip.setPixelColor(strip.numPixels() -i-1, 0);
    delay(wait);
  }

  strip.show(); // Refresh to turn off last pixel
}

void sendChars(){

  while ((!rf12_canSend()) )
    rf12_recvDone();
  rf12_sendStart(0, buf7 , bufferLength , 0);
  delay(50);

}

byte ReadOneByte() {
  int ByteRead;
  // Wait until there is data
  while(!Serial.available());
  //Get the number of bytes (characters) available for reading from the serial port.
  //This is data that's already arrived and stored in the serial receive buffer (which holds 64 bytes)
  ByteRead = Serial.read();
  return ByteRead; // read incoming serial data
}



void read_waves(int i) {
  delta_wave = read_3byte_int(i);
  i+=3;
  theta_wave = read_3byte_int(i);
  i+=3;
  low_alpha_wave = read_3byte_int(i);
  i+=3;
  high_alpha_wave = read_3byte_int(i);
  i+=3;
  low_beta_wave = read_3byte_int(i);
  i+=3;
  high_beta_wave = read_3byte_int(i);
  i+=3;
  low_gamma_wave = read_3byte_int(i);
  i+=3;
  mid_gamma_wave = read_3byte_int(i);
}

int read_3byte_int(int i) {
  return ((payloadData[i] << 16) + (payloadData[i+1] << 8) + payloadData[i+2]);
}

char getMaximum(){

  unsigned int rawVals[8] = {
    delta_wave, theta_wave, low_alpha_wave, high_alpha_wave, low_beta_wave, high_beta_wave,low_gamma_wave, mid_gamma_wave    };
  char max = -1;
  for ( int j = 0; j<8; j++){
    char h = 0;
    for ( int i = 0; i<8; i++){
      if ( rawVals[j] < rawVals[i] ) {
        h = 1; 
        break;
      }
    }
    if ( h == 0 ) {
      max = j;
      break;
    }
  }
  return max;
}

/*
https://learn.sparkfun.com/tutorials/hackers-in-residence---hacking-mindwave-mobile

    Gamma waves are oscillating waves with frequencies around 40 Hz, although they can be as high as 100 Hz and as low as 24 Hz. 
    These originate from the thalamus (buried deep in the center of the brain) and are responsible for states of high attention and concentration.
    
    Beta waves are between 12 and 30 Hz and are the states associated with normal waking consciousness. These are emitted from the motor cortex, a region of the cerebral cortex, which is the outermost layer of tissue on the brain. Beta waves are split into three sections: Low Beta Waves (12.5-16 Hz, “Beta 1 power”); Beta Waves (16.5–20 Hz, “Beta 2 power”); and High Beta Waves (20.5-28 Hz, “Beta 3 power”).
    
    Alpha waves originate at the Occipital lobe and have a frequency of 8-12Hz. These are most present when you are awake but are very drowsy or relaxed.
    
    Theta waves are oscillating waves that are located in the Hippocampus and are associated with dreaming. They are in the 4-7Hz range.
    
    Delta waves are associated with very deep, dreamless sleep cycles and are high amplitude waves, which have a 0 to 3Hz frequency. These waves emit from both the thalamus and the cortex.
    
Mapping:

Delta: blue
Theta: purple
Alpha: grey - white
Beta: green - (red ?)
Gamma: yellow - orange

colors: red - green - blue --- yellow - purple - cyan
white grey
    
*/

void setColor(char giveMaxRawData){

       switch (giveMaxRawData) {

          case 0: //Delta: blue
          r = 0;
          g = 0;
          b = 255;
            break;
               case 1://Theta: purple
          r = 255;
          g = 0;
          b = 255;
            break;
               case 2://Alpha: grey - 
          r = 20;
          g = 20;
          b = 20;
            break;
               case 3://Alpha:  - white
          r = 255;
          g = 255;
          b = 255;
            break;
               case 4://Beta: green - ( ?)
          r = 0;
          g = 255;
          b = 0;
            break;
               case 5://Beta:  - (red ?)
          r = 255;
          g = 0;
          b = 0;
            break;
               case 6://Gamma: yellow - 
          r = 255;
          g = 255;
          b = 0;
            break;
               case 7://Gamma:  - orange
          r = 255;
          g = 100;
          b = 0;
            break;
 
       }
}








