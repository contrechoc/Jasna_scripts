/* putting together: 
 Mindwave script
 Servo Script -> be careful: no softserial possible with servo script
 _>servo as pairs 5,6, and 3,9 PWM PIN's
 RF12 script -> using digital 13,12,11,10, 2
 
 change modes
 PD4 - digital 4 button to change modes
 PD7 - LED for signalling
 
 mode 0 = Mindwave
 mode 1 = show max and min slowly
 mode 2 = LDR
 
 */

///////////////////////////////////////////////////////////////
// Arduino Bluetooth Interface with Mindwave
// Sophi Kravitz edit 11-4
// Shane Clements edit 11-5
//////////////////////////////////////////////////////////////////////// 

// use CoolTermMac for getting the data from mySerial

// Exaltation - reacts on meditation

// softwareSerial en Servomotor are incompatible

// on PD4 - digital 4 button to change modes

unsigned char modus = 0;

/////////////////////// Mindwave var's checksum variables
byte payloadChecksum = 0;
byte CalculatedChecksum;
byte checksum = 0;              //data type byte stores an 8-bit unsigned number, from 0 to 255
int payloadLength = 0;
byte payloadData[100] = {
  0};
byte poorQuality = 0;
int attention = 0;
int meditation = 0;

unsigned int delta_wave = 0;
unsigned int theta_wave = 0;
unsigned int low_alpha_wave = 0;
unsigned int high_alpha_wave = 0;
unsigned int low_beta_wave = 0;
unsigned int high_beta_wave = 0;
unsigned int low_gamma_wave = 0;
unsigned int mid_gamma_wave = 0;

// system variables
long lastReceivedPacket = 0;
boolean bigPacket = false;
boolean brainwave = false;

int oldMed = 0;

////////////Servo lib's

#include <Servo.h> 

Servo myservo;   
Servo myservo2;

Servo myservo3;
Servo myservo4;

int pos = 0;    // variable to store the servo position 
unsigned char testServo = 0;

///////////RF12 lib's

#include <JeeLib.h>

char inputString[] = {
  '#','*', B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111
    , B11110000,B00001111,B11110000,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111
} 
;         // a string to hold incoming data
boolean stringComplete = false;  // whether the string is complete
unsigned char c = 0;
char buf7[] = {
  '#','*', B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111, 
  B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111,B00001111} 
; 
unsigned char bufferLength = 20;


void setup() {

  pinMode ( 4, INPUT);
  digitalWrite ( 4, HIGH); //pull up - if connected to GND gives signal

  pinMode ( 7, OUTPUT);
  blink7(3);

  modus = 0;

  rf12_initialize('R', RF12_868MHZ, 212);

  Serial.begin(57600);       // Bluetooth
  delay(100);

  myservo.attach(5);  // attaches the servo on pin 9 to the servo object 
  myservo2.attach(6); 

  myservo3.attach(3);  // attaches the servo on pin 9 to the servo object 
  myservo4.attach(9); 

  moveServoSlowly();

  //send test
  rf12_sendStart(0, inputString, bufferLength , 0);

}

void sendChars(){

  while ((!rf12_canSend()) )
    rf12_recvDone();
  rf12_sendStart(0, buf7 , bufferLength , 0);
  delay(50);

}

byte ReadOneByte() {
  int ByteRead;
  // Wait until there is data
  while(!Serial.available());
  //Get the number of bytes (characters) available for reading from the serial port.
  //This is data that's already arrived and stored in the serial receive buffer (which holds 64 bytes)
  ByteRead = Serial.read();
  return ByteRead; // read incoming serial data
}



void read_waves(int i) {
  delta_wave = read_3byte_int(i);
  i+=3;
  theta_wave = read_3byte_int(i);
  i+=3;
  low_alpha_wave = read_3byte_int(i);
  i+=3;
  high_alpha_wave = read_3byte_int(i);
  i+=3;
  low_beta_wave = read_3byte_int(i);
  i+=3;
  high_beta_wave = read_3byte_int(i);
  i+=3;
  low_gamma_wave = read_3byte_int(i);
  i+=3;
  mid_gamma_wave = read_3byte_int(i);
}

int read_3byte_int(int i) {
  return ((payloadData[i] << 16) + (payloadData[i+1] << 8) + payloadData[i+2]);
}

void loop() {

  if ( modus == 0 ){

    // Look for sync bytes
    // Byte order: 0xAA, 0xAA, payloadLength, payloadData,
    // Checksum (sum all the bytes of payload, take lowest 8 bits, then bit inverse on lowest
    if(ReadOneByte() == 0xAA) {
      if(ReadOneByte() == 0xAA) {

        payloadLength = ReadOneByte();
        if(payloadLength > 169) {
          //Payload length can not be greater than 169
          return;
        }
        payloadChecksum = 0;
        for(int i = 0; i < payloadLength; i++) {      //loop until payload length is complete
          payloadData[i] = ReadOneByte();             //Read payload
          payloadChecksum += payloadData[i];
        }
        checksum = ReadOneByte();                     //Read checksum byte from stream
        payloadChecksum = 255 - payloadChecksum;      //Take oneâ€™s compliment of generated checksum
        if(checksum == payloadChecksum) {
          poorQuality = 200;
          attention = 0;
          meditation = 0;
        }
        brainwave = false;
        for(int i = 0; i < payloadLength; i++) { // Parse the payload
          switch (payloadData[i]) {

          case 02:
            i++;
            poorQuality = payloadData[i];
            bigPacket = true;
            break;
          case 04:
            i++;
            attention = payloadData[i];
            break;
          case 05:
            i++;
            meditation = payloadData[i];
            break;
          case 0x80:
            i = i + 3;
            break;
          case 0x83:                         // ASIC EEG POWER INT
            i++;
            brainwave = true;
            byte vlen = payloadData[i];
            //mySerial.print(vlen, DEC);
            //mySerial.println();
            read_waves(i+1);
            i += vlen; // i = i + vlen
            break;
          }                                 // switch
        }                                   // for loop

        //now only two values are of interest at the moment: attention or meditation will be used for setting the collar

        if(brainwave && attention > 0 && attention < 100) {
          //rf12 sending data to laptop

          meditation = (meditation + oldMed)/2; 

          buf7[2] = (char)(meditation/10+48);
          buf7[3] = (char)(meditation%10+48);
          buf7[4] = ',';
          buf7[5] = (char)(attention/10+48);
          buf7[6] = (char)(attention%10+48);
          sendChars();

          oldMed = meditation;

          meditation = 90 - meditation;//matter of how the collar should move - can be done by the servo pair wiring too

          //servo setting
          if ( meditation < 10 ) meditation = 10; //limiting values for the servo's
          if ( meditation > 90 )  meditation = 90; //limiting values for the servo's

          //setting the servo motors, pusher 1
          myservo.write(min(90, meditation)); 
          myservo2.write( 90 - min(90, meditation)); 
          //setting the servo motors, pusher 2
          myservo3.write(min(90, meditation)); 
          myservo4.write( 90 - min(90, meditation)); 

        }
      } 
    }
    if ( digitalRead( 4 ) == LOW ) {
      modus = 1;
      blink7(1);

      buf7[2] = 'm';
      buf7[3] = 'o';
      buf7[4] = 'd';
      buf7[5] = 'u';
      buf7[6] = 's';
      buf7[7] = ' ';
      buf7[8] = '1';
      sendChars();

      delay(300);
    }
  }
  else if ( modus == 1 ){ // going from min to max slowly
    // on PD4 - digital 4 button to change modes

    moveServoSlowly();

    if ( digitalRead( 4 ) == LOW ) {
      modus = 2;
      blink7(2);

      buf7[2] = 'm';
      buf7[3] = 'o';
      buf7[4] = 'd';
      buf7[5] = 'u';
      buf7[6] = 's';
      buf7[7] = ' ';
      buf7[8] = '2';
      sendChars();

      delay(300);
    }
  }
  else if ( modus == 2 ){ //depending on an ldr going from min to max
    // on PD4 - digital 4 button to change modes
    int ldrVal = analogRead(0)/11;

    if ( ldrVal < 5 ) ldrVal = 5;
    if ( ldrVal > 85 ) ldrVal = 90;

    myservo.write(ldrVal); 
    myservo2.write( 90 - ldrVal);  

    myservo3.write(ldrVal); 
    myservo4.write( 90 - ldrVal);  
    delay(700);

    if ( digitalRead( 4 ) == LOW ) {
      modus = 0;
      blink7(5);
      buf7[2] = 'm';
      buf7[3] = 'o';
      buf7[4] = 'd';
      buf7[5] = 'u';
      buf7[6] = 's';
      buf7[7] = ' ';
      buf7[8] = '0';
      sendChars();

      delay(300);
    }
  }

}

void moveServoSlowly(){
  
  int upperLimit = 90;
  int lowerLimit = 10;
  //testing the servo's
  for(pos = lowerLimit; pos < upperLimit; pos += 1)  
  {    
//blue indication    
    myservo.write(pos - lowerLimit); 
    myservo2.write( upperLimit - pos + lowerLimit);  

//red indication
    myservo3.write(pos); 
    myservo4.write( upperLimit - pos);      
    delay(15);                    
  } 
  for(pos = upperLimit; pos>=lowerLimit; pos-=1)   
  {    
//blue indication    
   myservo.write(pos - lowerLimit);
    myservo2.write( upperLimit - pos+ lowerLimit);   
 
//red indication
    myservo3.write(pos); 
    myservo4.write( upperLimit - pos);      
    delay(15);                      
  } 

  delay(100);
}

void blink7(int numberOfTimes){
  for ( int i=0; i<numberOfTimes ; i++){
    digitalWrite(7, HIGH);
    delay(200);
    digitalWrite(7, LOW);
    delay(200);
  }
}












