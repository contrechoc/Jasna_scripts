/* putting together:

    Teensey, with 2 serial ports
   Mindwave script

 */

///////////////////////////////////////////////////////////////
// Arduino Bluetooth Interface with Mindwave
// Sophi Kravitz edit 11-4
// Shane Clements edit 11-5
////////////////////////////////////////////////////////////////////////

// Exaltation - reacts on meditation

// softwareSerial en Servomotor are incompatible

// on PD4 - digital 4 button to change modes

unsigned char modus = 0;

/////////////////////// Mindwave var's checksum variables
byte payloadChecksum = 0;
byte CalculatedChecksum;
byte checksum = 0;              //data type byte stores an 8-bit unsigned number, from 0 to 255
int payloadLength = 0;
byte payloadData[100] = {
  0
};
byte poorQuality = 0;
int attention = 0;
int meditation = 0;

unsigned int delta_wave = 0;
unsigned int theta_wave = 0;
unsigned int low_alpha_wave = 0;
unsigned int high_alpha_wave = 0;
unsigned int low_beta_wave = 0;
unsigned int high_beta_wave = 0;
unsigned int low_gamma_wave = 0;
unsigned int mid_gamma_wave = 0;

// system variables
long lastReceivedPacket = 0;
boolean bigPacket = false;
boolean brainwave = false;

int oldMed = 0;



void setup() {

  pinMode ( 13, OUTPUT);
  blink13(3);

  modus = 0;

  Serial1.begin(57600);       // Bluetooth
  Serial.begin(9600);
  delay(100);

  Serial.print( "Starting up!:");

}


byte ReadOneByte() {
  int ByteRead;
  // Wait until there is data
  while (!Serial1.available());
  //Get the number of bytes (characters) available for reading from the Serial1 port.
  //This is data that's already arrived and stored in the Serial1 receive buffer (which holds 64 bytes)
  ByteRead = Serial1.read();
  return ByteRead; // read incoming Serial1 data
}



void read_waves(int i) {
  delta_wave = read_3byte_int(i);
  i += 3;
  theta_wave = read_3byte_int(i);
  i += 3;
  low_alpha_wave = read_3byte_int(i);
  i += 3;
  high_alpha_wave = read_3byte_int(i);
  i += 3;
  low_beta_wave = read_3byte_int(i);
  i += 3;
  high_beta_wave = read_3byte_int(i);
  i += 3;
  low_gamma_wave = read_3byte_int(i);
  i += 3;
  mid_gamma_wave = read_3byte_int(i);
}

int read_3byte_int(int i) {
  return ((payloadData[i] << 16) + (payloadData[i + 1] << 8) + payloadData[i + 2]);
}

void loop() {


  // Look for sync bytes
  // Byte order: 0xAA, 0xAA, payloadLength, payloadData,
  // Checksum (sum all the bytes of payload, take lowest 8 bits, then bit inverse on lowest
  if (ReadOneByte() == 0xAA) {
    if (ReadOneByte() == 0xAA) {

      payloadLength = ReadOneByte();
      if (payloadLength > 169) {
        //Payload length can not be greater than 169
        return;
      }
      payloadChecksum = 0;
      for (int i = 0; i < payloadLength; i++) {     //loop until payload length is complete
        payloadData[i] = ReadOneByte();             //Read payload
        payloadChecksum += payloadData[i];
      }
      checksum = ReadOneByte();                     //Read checksum byte from stream
      payloadChecksum = 255 - payloadChecksum;      //Take oneâ€™s compliment of generated checksum
      if (checksum == payloadChecksum) {
        poorQuality = 200;
        attention = 0;
        meditation = 0;
      }
      brainwave = false;
      for (int i = 0; i < payloadLength; i++) { // Parse the payload
        switch (payloadData[i]) {

          case 02:
            i++;
            poorQuality = payloadData[i];
            bigPacket = true;
            break;
          case 04:
            i++;
            attention = payloadData[i];
            break;
          case 05:
            i++;
            meditation = payloadData[i];
            break;
          case 0x80:
            i = i + 3;
            break;
          case 0x83:                         // ASIC EEG POWER INT
            i++;
            brainwave = true;
            byte vlen = payloadData[i];
            //mySerial1.print(vlen, DEC);
            //mySerial1.println();
            read_waves(i + 1);
            i += vlen; // i = i + vlen
            break;
        }                                 // switch
      }                                   // for loop

      //now only two values are of interest at the moment: attention or meditation will be used for setting the collar

      if (brainwave && attention > 0 && attention < 100) {

        Serial.print( "meditation:");
        Serial.print( meditation);
        Serial.print( ", attention:");
        Serial.println( attention);


      }
    }
  }

}

void blink13(int numberOfTimes) {
  for ( int i = 0; i < numberOfTimes ; i++) {
    digitalWrite(13, HIGH);
    delay(200);
    digitalWrite(13, LOW);
    delay(200);
  }
}












