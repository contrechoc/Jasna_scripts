
/* putting together:

    Teensey, with 2 serial ports
   Mindwave script

 */

// Ex-standing waves, servo motors on 8 frequency domains

#include <Servo.h>


/////////////////////// Mindwave var's checksum variables
byte payloadChecksum = 0;
byte CalculatedChecksum;
byte checksum = 0;              //data type byte stores an 8-bit unsigned number, from 0 to 255
int payloadLength = 0;
byte payloadData[100] = {
  0
};
byte poorQuality = 0;
int attention = 0;
int meditation = 0;

unsigned int delta_wave = 0;
unsigned int theta_wave = 0;
unsigned int low_alpha_wave = 0;
unsigned int high_alpha_wave = 0;
unsigned int low_beta_wave = 0;
unsigned int high_beta_wave = 0;
unsigned int low_gamma_wave = 0;
unsigned int mid_gamma_wave = 0;

// system variables
long lastReceivedPacket = 0;
boolean bigPacket = false;
boolean brainwave = false;

int oldMed = 0;
 
unsigned long timer = 0;
char timerCounter = 0;

Servo myservo1, myservo2, myservo3, myservo4, myservo5, myservo6, myservo7, myservo8 ;

int getNormWave(int myWave ) {
  int outWave = myWave;
  if ( outWave > 50000 ) outWave = 50000;
  outWave = min( 180, outWave / 350);
  return outWave;
}

void blink13(int numberOfTimes) {
  for ( int i = 0; i < numberOfTimes ; i++) {
    digitalWrite(13, HIGH);
    delay(200);
    digitalWrite(13, LOW);
    delay(200);
  }
}

void setup() {

  pinMode ( 13, OUTPUT);
  blink13(3);


  Serial2.begin(57600);       // Bluetooth
  Serial.begin(9600);
  delay(100);
  int myDel = 500;
  myservo1.attach(23);  delay(myDel); //delay for not having all the servo motors move at the same time, current management
  myservo2.attach(4);  delay(myDel);
  myservo3.attach(5);  delay(myDel);
  myservo4.attach(6);  delay(myDel);
  myservo5.attach(20);  delay(myDel);
  myservo6.attach(21);  delay(myDel);
  myservo7.attach(22);  delay(myDel);
  myservo8.attach(3);  delay(myDel);

  Serial.println( "Ex-standing waves sssssssstarting up!:");

  timer = millis() + 5000;

}


byte ReadOneByte() {
  int ByteRead;
  // Wait until there is data
  while (!Serial2.available())
  {
    if ( (timer < millis()) ) {
      Serial.print("Wait ");
      Serial.println(millis() / 1000);
      timer = millis() + 5000;
      waitAction();
    }
  }

  //Get the number of bytes (characters) available for reading from the Serial2 port.
  //This is data that's already arrived and stored in the Serial2 receive buffer (which holds 64 bytes)
  ByteRead = Serial2.read();
  return ByteRead; // read incoming Serial2 data
}

void read_waves(int i) {
  delta_wave = read_3byte_int(i);
  i += 3;
  theta_wave = read_3byte_int(i);
  i += 3;
  low_alpha_wave = read_3byte_int(i);
  i += 3;
  high_alpha_wave = read_3byte_int(i);
  i += 3;
  low_beta_wave = read_3byte_int(i);
  i += 3;
  high_beta_wave = read_3byte_int(i);
  i += 3;
  low_gamma_wave = read_3byte_int(i);
  i += 3;
  mid_gamma_wave = read_3byte_int(i);
}

int read_3byte_int(int i) {
  return ((payloadData[i] << 16) + (payloadData[i + 1] << 8) + payloadData[i + 2]);
}

void loop() {

  // Look for sync bytes
  // Byte order: 0xAA, 0xAA, payloadLength, payloadData,
  // Checksum (sum all the bytes of payload, take lowest 8 bits, then bit inverse on lowest
  if (ReadOneByte() == 0xAA) {
    if (ReadOneByte() == 0xAA) {

      payloadLength = ReadOneByte();
      if (payloadLength > 169) {
        //Payload length can not be greater than 169
        return;
      }
      payloadChecksum = 0;
      for (int i = 0; i < payloadLength; i++) {     //loop until payload length is complete
        payloadData[i] = ReadOneByte();             //Read payload
        payloadChecksum += payloadData[i];
      }
      checksum = ReadOneByte();                     //Read checksum byte from stream
      payloadChecksum = 255 - payloadChecksum;      //Take oneâ€™s compliment of generated checksum
      if (checksum == payloadChecksum) {
        poorQuality = 200;
        attention = 0;
        meditation = 0;
      }
      brainwave = false;
      for (int i = 0; i < payloadLength; i++) { // Parse the payload
        switch (payloadData[i]) {

          case 02:
            i++;
            poorQuality = payloadData[i];
            bigPacket = true;
            break;
          case 04:
            i++;
            attention = payloadData[i];
            break;
          case 05:
            i++;
            meditation = payloadData[i];
            break;
          case 0x80:
            i = i + 3;
            break;
          case 0x83:                         // ASIC EEG POWER INT
            i++;
            brainwave = true;
            byte vlen = payloadData[i];
            //mySerial2.print(vlen, DEC);
            //mySerial2.println();
            read_waves(i + 1);
            i += vlen; // i = i + vlen
            break;
        }                                 // switch
      }                                   // for loop

      //now only two values are of interest at the moment: attention or meditation will be used for setting the collar

      if (brainwave && attention > 0 && attention < 100) {
 

        int myDel = 150;//delay for not having all the servo motors move at the same time, current management

        myservo1.write(min(180, getNormWave( delta_wave / 100 )));
        delay(myDel);
        myservo2.write(min(180, getNormWave( theta_wave )));
        delay(myDel);
        myservo3.write(min(180, getNormWave( low_alpha_wave )));
        delay(myDel);
        myservo4.write(min(180, getNormWave( high_alpha_wave )));
        delay(myDel);
        myservo5.write(min(180, getNormWave( low_beta_wave )));
        delay(myDel);
        myservo6.write(min(180, getNormWave( high_beta_wave )));
        delay(myDel);
        myservo7.write(min(180, getNormWave( low_gamma_wave )));
        delay(myDel);
        myservo8.write(min(180, getNormWave( mid_gamma_wave )));
        delay(myDel);

        Serial.print( meditation);
        Serial.print( ",");
        Serial.print( attention);
        Serial.print( ",");
        Serial.print( getNormWave (delta_wave / 100) );
        Serial.print( ",");
        Serial.print( getNormWave(theta_wave));
        Serial.print( ",");
        Serial.print( getNormWave(low_alpha_wave ));
        Serial.print( ",");
        Serial.print( getNormWave(high_alpha_wave ));
        Serial.print( ",");
        Serial.print( getNormWave(low_beta_wave));
        Serial.print( ",");
        Serial.print( getNormWave(high_beta_wave ));
        Serial.print( ",");
        Serial.print( getNormWave(low_gamma_wave ));
        Serial.print( ",");
        Serial.print( getNormWave(mid_gamma_wave ));
        Serial.println( ",");
        blink13(1);
        timer = millis() + 5000;
      }
    }
  }

  if ( (timer < millis())  ) {
    Serial.println("Wait");
    timer = millis() + 5000;
    waitAction();
  }
  
}

void waitAction() {

  int pos = 0;
  if ( (timerCounter++ % 2) == 0) {
    pos = 45;
  }
  else
  {
    pos = 110;
  }
  blink13(2);

  int myDel = 150;//delay for not having all the servo motors move at the same time, current management

  myservo1.write(pos);
  delay(myDel);
  myservo2.write(pos);
  delay(myDel);
  myservo3.write(pos);
  delay(myDel);
  myservo4.write(pos);
  delay(myDel);
  myservo5.write(pos);
  delay(myDel);
  myservo6.write(pos);
  delay(myDel);
  myservo7.write(pos);
  delay(myDel);
  myservo8.write(pos);
  delay(myDel);

}














